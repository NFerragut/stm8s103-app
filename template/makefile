### Definitions ###############################################################

# Application name
APP = myApp

# Directories
INCDIR = inc
LIBDIR = lib
OUTDIR = Debug

# Assembler
AS = castm8
AFLAGS = -i$(INCDIR) -l

# Compiler
CC = cxstm8
CFLAGS = -cl$(OUTDIR) -co$(OUTDIR) -dDEBUG -i$(INCDIR) -pc99 -l +debug +mods0 +proto +strict +warn

# Application
SOURCES = $(shell ls *.c *.s)
OBJECTS = $(addprefix $(OUTDIR)/, $(addsuffix .o,$(basename $(SOURCES))))

# Make sure that there is an output directory
$(shell mkdir -p $(OUTDIR) >/dev/null)

# Standard linker command file
define LKF =
# -- Link Command File --
# Definitions
+def __stack=0x3ff
+def ms=0x04
# Zero-Page RAM segments
+seg .bsct -b 0x08 -m 0xf8 -n .bsct
+seg .ubsct -a .bsct -n .ubsct
+seg .bit -a .ubsct -n .bit -c
+seg .share -a .bit -n .share -it
# RAM segments
+seg .data -b 0x100 -m 0x100 -n .data
+seg .bss -a .data -n .bss
# EEPROM segment
+seg .eeprom -b 0x4000 -m 0x280 -n .eeprom
# Interrupt Vector Table
+seg vector -b 0x8000 -m 0x80 -n vector -k
# Flash segments
+seg .const -b 0x8080 -m 0x1f80 -n .const -it
+seg .text -a .const -n .text
# Application Object Files
+inc $(OUTDIR)/obj_list
# Library Object Files
$(LIBDIR)/libis0.sm8
$(LIBDIR)/libapp0.sm8
endef
export LKF


### Targets ###################################################################

# First target is the default make target
all : $(OUTDIR)/$(APP).s19 $(OUTDIR)/$(APP).elf
	@grep -E "length.*[1-9].*segment (.bsct|.ubsct|.bit|.share|.data|.bss|.eeprom|vector|.const|.text)" $(OUTDIR)/*.map
	@$(if $(wildcard $(OUTDIR)/$(APP).s19.previous), \
		$(if $(shell diff -q $(OUTDIR)/$(APP).s19.previous $(OUTDIR)/$(APP).s19),,echo No S19 Change))

# Remove all files generated by make
clean :
	find . -name "*.ls" -type f -delete
	find . -name "*.o" -type f -delete
	rm -rf Debug/

list :
	@echo --- SOURCES ---
	@echo $(SOURCES)
	@echo
	@echo --- OBJECTS ---
	@echo $(OBJECTS)


### Rules #####################################################################

# Delete built-in rules for building .c and .s files
$(OUTDIR)/%.o : %.s
$(OUTDIR)/%.o : %.c

$(OUTDIR)/%.o : %.c
	@$(CC) $(CFLAGS) $<

$(OUTDIR)/%.o : %.s
	@echo $<:
	@$(AS) $(AFLAGS) +l$(addsuffix .ls,$(basename $@)) -o$@ $<

$(OUTDIR)/obj_list : $(OBJECTS)
	@echo $@:
	@ls -1 $(OUTDIR)/*.o > $@

$(OUTDIR)/$(APP).lkf : $(OUTDIR)/obj_list
	@echo $@:
	@echo "$$LKF" > $@

$(OUTDIR)/$(APP).sm8 : $(LIBDIR)/libis0.sm8 $(LIBDIR)/libapp0.sm8 $(SOURCES) $(OBJECTS) $(OUTDIR)/$(APP).lkf $(OUTDIR)/obj_list
	@echo $@:
	@clnk -m$(OUTDIR)/$(APP).map -o$(OUTDIR)/$(APP).sm8 $(OUTDIR)/$(APP).lkf $(OBJECTS)

$(OUTDIR)/$(APP).s19 : $(OUTDIR)/$(APP).sm8
	@echo $@:
	@$(if $(wildcard $(OUTDIR)/$(APP).s19), cp -f $(OUTDIR)/$(APP).s19 $(OUTDIR)/$(APP).s19.previous)
	@chex -o$(OUTDIR)/$(APP).s19 $(OUTDIR)/$(APP).sm8

$(OUTDIR)/$(APP).elf : $(OUTDIR)/$(APP).sm8
	@echo $@:
	@cvdwarf $(OUTDIR)/$(APP).sm8


###############################################################################
